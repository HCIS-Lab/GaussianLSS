_target_: GaussianLSS.model.GaussianLSS.GaussianLSS

embed_dims: 128
error_tolerance: 0.5
depth_num: 64
opacity_filter: 0.01
img_h: ${data.image.h}
img_w: ${data.image.w}

backbone:
  _target_: GaussianLSS.model.backbones.efficientnet.EfficientNet
  image_height: ${data.image.h}
  image_width: ${data.image.w}
  return_list: ["reduction_3", "reduction_4"]
  # checkpoint: True

neck:
  _target_: GaussianLSS.model.backbones.agp.AGPNeck

  align_res_layer:
    _target_: GaussianLSS.model.backbones.agp.AlignRes
    mode: "upsample"
    scale_factors: [1, 2]

  prepare_c_layer:
    _target_: GaussianLSS.model.backbones.agp.PrepareChannel
    in_channels: [56, 160]
    depth_num: ${model.depth_num} 
    interm_c: 256
    out_c: ${model.embed_dims}
    
decoder:
  _target_: GaussianLSS.model.decoder.BevEncode
  inC: ${model.embed_dims}  
  outC: ${model.embed_dims}  

head:
  _target_: GaussianLSS.model.decoder.SegHead

  dim_last: ${model.embed_dims} 
  multi_head: True